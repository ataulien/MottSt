MottSt
Jennifer Yu, Brooke Jin, Bryan Chan
pd5
-----------------------------------

/////////// Zone of Reflection \\\\\\\\\\\

Obstacles Overcome: 
- GUI Mindset
   - Lots of problems with how/when to draw and display an object
   - Solved issue by utilizing state variables
   - Update the states of objects, and then display according to their state. 
- Buttons in Processing
   - Had recommendation to use cp5 Library for buttons...turned out to be very complicated
   - Button issue stemmed from having to check simultaneously if the mouse was pressed and over a certain object
   - Remedied via a simple Processing example from the general reference found online
- Dragging Customers around the screen 
   - Necessitated research into mouse actions, such as mouseDragged()
   - Simple processing example from online general reference again helped optimize functionality 
   - Customers did not move back to original coordinates if they weren't dragged to a table; remedied with two additonal instance variables 
- How to find the passage of Time
   - Originally considered utilizing the Timer class within Java
   - Ended up writing a Time class, that would utilize nanoTime() and conversion to seconds to determine elapsedTime()
   - Later, Time class expanded to allow for time to be paused and restarted. 
- Cooking Food
   - Considering the usage of threads (e.g. multiple things cooking at the same time), however, threads are rather complicated
   - Ended up using the Time class written again; had functions that returned whether a certain interval had passed. 
- Movement of the Waiter
   - Considered imposing a grid onto the world, and move as if solving for a maze
   - Decided on a map of nodes, where with tables and objects placed such as to minimize collisions
- Moods of the Customers
   - Countdown occurred far too quickly
   - Moods should not increment while the customer is reading the menu/eating
- Algorithms regarding Spawning and Point distribution 
   - Customers with low VIP numbers and higher priority would have a lower Wait time but would deliver more points
   - Spawning customers was dependent on the amount of points earned. 
   - Had to math out a bunch of rules for fulfilling goals outlined above...kind of succeeded? 
- Philosophical issues: should a Waiter have a Kitchen instance variable? 
   - Decided that a Waiter should: thinking large scale, what if there were multiple Kitchens and Waiters? Each Waiter should be aware of the Kitchen she/he is servicing...

Unresolved Issues:
- At times, the waiter may seem still to walk over a customer. To whom it may concern, we are sorry. 
- Spawn time seems to be suboptimal and the game's difficulty isn't increasing as quickly as anticipated with the increasing of points. 
- Times when the customer leaves right after the waiter serves the order...the order remains on the table, but is quickly cleared away when another customer is seated in the same spot.
- When the waiter is moving and the user simultaneously drags a customer to a table, the waiter will stop in her/his tracks. She/he can resume their path with a simple click on a clickable destination object.
- Moods do not decrement uniformly. As the algorithm right now decrements mood based on the percentage of the time elapsed and the maximum tolerance time of the Customer, the decrease is not linear but rather curved. 
- When orders are taken, 

Cool Stuff Learned:
- 

Mid design changes:
- Originally had a reservations list; was scrapped because of complexity. Also didn't make much sense, as the game itself doesn't incorporate much of a storyline, but rather is just an endless game where the user tries to earn as many points as possible. 
- Original command line version included the SDish, MDish, and LDish classes that were not included in the final GUI version. Again, aiming for simplicity, the original idea was that SDish classes would take less time to cook than MDish or LDish classes, but it ended up becoming that such embellishment only clouded the purpose of the game. Additonally, we would have had to include an option for the waiter to add dishes to either the front or back of the queue based on their size...again the idea was too complicated for a simple game. 
- Game would have a fast paced serving of customers. However, with the writing of the Time class, we found that it seemed logical for customers to wait before ordering food and eating food would also require a period of time where the waiter is not involved. Using the Time class, we paused time for customers while they were performing certain actions typical in a restaurant. 

Lessons Learned:
Organization is key, especially when dealing with many classes. 
State variables are our friends.
The internet needs more graphics of Chinese people. 

                               
\\\\\\\\\\\ Zone of Reflection ///////////
###############################################################



 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
==============================================================

2017-05-17
<Jen,Brooke,Bryan> :: Created the project proposal
<Jen> :: Created the repo

2017-05-18
<Jen> :: Created the basic Order and Customer classes
<Brooke> :: Created basic Waiter and Restaurant classes

2017-05-19
<Jen,Brooke,Bryan> :: Updated each class to ensure compile capabilities
<Bryan> :: Linked submodule 
<Jen> :: Wrote the main method for the Restarant Driver file 
         Uploaded Flowchart for Vanilla Version and next version

2017-05-20
<Bryan> :: Started research on the Timer class
<Brooke> :: Provided an ALHeap structure to the Restaurant class

2017-05-21
<Brooke> :: Created Kitchen class
<Jen> :: Placed in commands for the waiter

2017-05-22
<Brooke, Bryan, Jen> :: Facetime in class, discussed how to write driver
       			Decided that a Restaurant has-a Kitchen
<Jen> :: Finished up commands, modified driver file to solicit user input
         Added Deque and Queue classes for underlying data structures in other classes
         
2017-05-23
<Brooke, Jen> :: Facetime in class, discussed next steps
<Brooke> :: Wrote the SDish, MDish, LDish classes
<Jen> :: Wrote the flowchart and UML diagrams

2017-05-24
<Brooke> :: Added to commands such that orders will be added to the kitchen and served from the kitchen
<Bryan, Jen> :: Started work on the processing version

2017-05-25
<Brooke, Jen> :: Continued on Processing implementation of the game 
                 Decided on creating a Table class

2017-05-26
<Brooke, Jen> :: Coded example with follower and leader
                 Messed around with animation 
<Bryan, Brooke, Jen> :: Discussed navigation of waiter, layout of restaurant, etc. 

2017-05-28
<Bryan> :: Finished waiter graphics and created four customers. Additionally made backdrop of the Restaurant. 
<Brooke> :: Coded pathways for the waiter throughout the restaurant, still needs to be improved
<Jen> :: Worked with the cp5 class to create potential buttons
         Wrote the Table class
         
2017-05-29
<Bryan> :: Added table widgets
<Brooke> :: Continued working on paths for waiter within restaurant
<Jen> :: Made the Draggable class for future customers that are dragged to tables

2017-05-30
<Bryan> :: Modified background size, working on creating widgets for final graphics
<Brooke> :: Fixed hovering error (waiter would only move when mouse hovered over the table) and waiter no longer teleports to the table
<Jen> :: Added comments for code and worked on created a table button

2017-05-31
<Jen> :: Tables are now buttons and clickable to trigger an action, cp5 class not going to be utilized
         Customers are now draggable around the world
         ...hours later...
         Basic functionality of game is complete. Waiters are able to take customer's orders, deliver them to the kitchen to be processed, pick them up, serve the customers and then deliver the bill. 
<Bryan> :: Edited size of the world and created the final table widgets

2017-06-01
<Bryan> :: Waiter has different positions, lucky cat is the kitchen
<Brooke> :: Started on the waiter moving mechanism 

2017-06-02
<Brooke> :: Completed the waiter moving mechanism (no usage of grid!!)

2017-06-03
<Jen> :: May have passed her Physics SAT II
         Fixed the waiter moving problem with state vars
<Bryan> :: Photoshopped customers to have a sitting animation, added graphics
<Brooke> :: Implemented new graphics

2017-06-04
<Jen> :: Fixed sitting interaction, added food animations
<Brooke> :: Fixed mood of the customers
<Bryan> :: Added different orientations of waiter

2017-06-05
<Jen> :: Implemented mood countdown, added food image to the table
<Bryan> :: Added points depending on the mood of the customer, added an end screen that displays points
<Brooke> :: Updated README
<All> :: General Debugging

2017-06-06
<Jen> :: Fixed waiter movement, created console
<Brooke> :: Fixed the mood of the customer on line
<All> :: General debugging
